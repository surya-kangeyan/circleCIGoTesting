/*
 * Continous Food Delievery
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

// AddImage - Add an image to the restaraunt
func AddImage(c *gin.Context) {

	var menuItem MenuItem

	if err := c.BindJSON(&menuItem.Image); err != nil {
		return
	}

	err := DB.Create(&MenuItem{
		Image: menuItem.Image,
	}).Error
	if err != nil {
		panic(err)
	}

	c.JSON(http.StatusOK, menuItem.Image)
}

// DeleteImage - Remove image
func DeleteImage(c *gin.Context) {
	id := c.Param("imageId")
	result, _ := strconv.Atoi(id)

	var menuiItems []MenuItem
	DB.Find(&menuiItems)

	for _, mi := range menuiItems {
		x := int(mi.ImageId)
		if x == result {
			findresult := DB.Find(&mi.ImageId).Where("ImageId = ?", id).Delete(&mi.Image)
			fmt.Println(findresult)
			DB.Save(&mi)
			c.JSON(http.StatusOK, "Image Deleted")
			return
		}
	}
	c.JSON(http.StatusNotFound, gin.H{"message": "image not found"})
}

// GetImage - Get image
func GetImage(c *gin.Context) {
	id := c.Param("imageId")
	result, _ := strconv.Atoi(id)

	var menuiItems []MenuItem
	DB.Find(&menuiItems)

	for _, mi := range menuiItems {
		x := int(mi.ImageId)
		if x == result {
			DB.Find(&mi.ImageId)
			attachment := fmt.Sprintf("attachment; filename=%s", mi.ImageName)
			c.Header("Content-Disposition", attachment)
			c.Data(http.StatusOK, "application/octet-stream", mi.Image)
			//c.JSON(http.StatusOK, mi.Image)
			return
		}
	}
	c.JSON(http.StatusNotFound, gin.H{"message": "image not found"})
}
